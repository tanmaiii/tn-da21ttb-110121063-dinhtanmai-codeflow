swagger: '2.0'
info:
  title: CodeFlow API
  description: API documentation for CodeFlow application
  version: '1.0.0'
  contact:
    name: CodeFlow Team
    email: support@codeflow.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

host: localhost:3000
basePath: /api

tags:
- name: users
  description: User management operations

paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Get all users
      description: Retrieve a list of all users in the system
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved users list
          schema:
            type: array
            items:
              $ref: '#/definitions/UserResponse'
          examples:
            application/json:
              - id: 1
                email: "user@example.com"
                createdAt: "2024-01-01T00:00:00Z"
                updatedAt: "2024-01-01T00:00:00Z"
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'

# [POST] users
    post:
      tags:
      - users
      summary: Create a new user
      description: Create a new user account with email and password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: body
        in: body
        description: User registration data
        required: true
        schema:
          $ref: '#/definitions/UserCreateRequest'
      responses:
        201:
          description: User created successfully
          schema:
            $ref: '#/definitions/UserResponse'
          examples:
            application/json:
              id: 1
              email: "user@example.com"
              createdAt: "2024-01-01T00:00:00Z"
              updatedAt: "2024-01-01T00:00:00Z"
        400:
          description: Invalid input data
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              error: "Validation failed"
              message: "Email is required"
        409:
          description: User already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              error: "Conflict"
              message: "User with this email already exists"
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Get user by ID
      description: Retrieve a specific user by their unique identifier
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: Unique user identifier
        required: true
        type: integer
        minimum: 1
        example: 1
      responses:
        200:
          description: User found successfully
          schema:
            $ref: '#/definitions/UserResponse'
          examples:
            application/json:
              id: 1
              email: "user@example.com"
              createdAt: "2024-01-01T00:00:00Z"
              updatedAt: "2024-01-01T00:00:00Z"
        404:
          description: User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              error: "Not Found"
              message: "User with ID 1 not found"
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update user by ID
      description: Update an existing user's information
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: Unique user identifier
        required: true
        type: integer
        minimum: 1
        example: 1
      - name: body
        in: body
        description: Updated user data
        required: true
        schema:
          $ref: '#/definitions/UserUpdateRequest'
      responses:
        200:
          description: User updated successfully
          schema:
            $ref: '#/definitions/UserResponse'
          examples:
            application/json:
              id: 1
              email: "updated@example.com"
              createdAt: "2024-01-01T00:00:00Z"
              updatedAt: "2024-01-02T00:00:00Z"
        400:
          description: Invalid input data
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: Email already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete user by ID
      description: Permanently delete a user account
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: Unique user identifier
        required: true
        type: integer
        minimum: 1
        example: 1
      responses:
        200:
          description: User deleted successfully
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              success: true
              message: "User deleted successfully"
        404:
          description: User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'

# definitions
definitions:
  UserCreateRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
        description: User's email address
        example: "user@example.com"
        minLength: 5
        maxLength: 255
      password:
        type: string
        description: User's password
        example: "password123"
        minLength: 6
        maxLength: 255

  UserUpdateRequest:
    type: object
    properties:
      email:
        type: string
        format: email
        description: Updated email address
        example: "updated@example.com"
        minLength: 5
        maxLength: 255
      password:
        type: string
        description: Updated password
        example: "newpassword123"
        minLength: 6
        maxLength: 255

  UserResponse:
    type: object
    properties:
      id:
        type: integer
        description: Unique user identifier
        example: 1
      email:
        type: string
        format: email
        description: User's email address
        example: "user@example.com"
      createdAt:
        type: string
        format: date-time
        description: User creation timestamp
        example: "2024-01-01T00:00:00Z"
      updatedAt:
        type: string
        format: date-time
        description: User last update timestamp
        example: "2024-01-01T00:00:00Z"

  ErrorResponse:
    type: object
    properties:
      error:
        type: string
        description: Error type
        example: "Validation Error"
      message:
        type: string
        description: Detailed error message
        example: "Email is required"

  SuccessResponse:
    type: object
    properties:
      success:
        type: boolean
        description: Operation success status
        example: true
      message:
        type: string
        description: Success message
        example: "Operation completed successfully"

schemes:
 - https
 - http
