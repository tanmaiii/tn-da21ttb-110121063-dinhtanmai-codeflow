{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "CodeFlow API",
    "description": "API Documentation for CodeFlow application"
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Posts",
      "description": "Post management endpoints"
    },
    {
      "name": "Courses",
      "description": "Course management endpoints"
    },
    {
      "name": "Topics",
      "description": "Topic management endpoints"
    },
    {
      "name": "Tags",
      "description": "Tag management endpoints"
    },
    {
      "name": "Comments",
      "description": "Comment management endpoints"
    },
    {
      "name": "Notifications",
      "description": "Notification endpoints"
    },
    {
      "name": "Search",
      "description": "Search endpoints"
    },
    {
      "name": "Files",
      "description": "File upload/download endpoints"
    },
    {
      "name": "GitHub",
      "description": "GitHub integration endpoints"
    },
    {
      "name": "Repositories",
      "description": "Repository management endpoints"
    },
    {
      "name": "System",
      "description": "System and health check endpoints"
    }
  ],
  "paths": {
    "/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register new user",
        "description": "Create a new user account",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "description": "Authenticate user and return JWT token",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUserDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/loginWithGithub": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login with GitHub",
        "description": "Authenticate user using GitHub OAuth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserGithubDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/checkJoinOrganization": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Check organization membership",
        "description": "Check if user is member of organization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Organization status"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/info": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get user info",
        "description": "Get current authenticated user information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "description": "Logout current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Retrieve list of all users (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create new user",
        "description": "Create a new user (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieve user information by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User information"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Update user information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user permanently",
        "description": "Permanently delete user (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{id}/delete": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Soft delete user",
        "description": "Soft delete user (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User soft deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get all posts",
        "description": "Retrieve list of all posts with optional pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts"
          }
        }
      },
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "Create new post",
        "description": "Create a new post",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePostDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Post created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get post by ID",
        "description": "Retrieve specific post by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Post information"
          }
        }
      },
      "put": {
        "tags": [
          "Posts"
        ],
        "summary": "Update post",
        "description": "Update post information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePostDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post updated"
          }
        }
      },
      "delete": {
        "tags": [
          "Posts"
        ],
        "summary": "Delete post permanently",
        "description": "Permanently delete a post",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted"
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Global search",
        "description": "Search across all content (posts, courses, topics, etc.)",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Search term"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Health check",
        "description": "Check if the server is running and CORS is working",
        "responses": {
          "200": {
            "description": "Server is healthy",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "OK"
                },
                "message": {
                  "type": "string",
                  "example": "Server is running"
                },
                "timestamp": {
                  "type": "string",
                  "example": "2024-01-01T00:00:00.000Z"
                },
                "cors": {
                  "type": "string",
                  "example": "enabled"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateUserDto": {
      "type": "object",
      "required": [
        "email",
        "password",
        "username"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "password": {
          "type": "string",
          "example": "password123"
        },
        "username": {
          "type": "string",
          "example": "username"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        }
      }
    },
    "LoginUserDto": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "password": {
          "type": "string",
          "example": "password123"
        }
      }
    },
    "CreateUserGithubDto": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "username": {
          "type": "string",
          "example": "username"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "githubId": {
          "type": "string",
          "example": "12345"
        },
        "avatar": {
          "type": "string",
          "example": "https://avatars.githubusercontent.com/u/12345"
        }
      }
    },
    "UpdateUserDto": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "username": {
          "type": "string",
          "example": "username"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        }
      }
    },
    "CreatePostDto": {
      "type": "object",
      "required": [
        "title",
        "content"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "Sample Post Title"
        },
        "content": {
          "type": "string",
          "example": "This is the post content"
        },
        "courseId": {
          "type": "integer",
          "example": 1
        },
        "isPublished": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "UpdatePostDto": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Updated Post Title"
        },
        "content": {
          "type": "string",
          "example": "Updated post content"
        },
        "isPublished": {
          "type": "boolean",
          "example": true
        }
      }
    }
  }
}